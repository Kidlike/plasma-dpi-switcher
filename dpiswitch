#! /usr/bin/env python3

import argparse
import sys
from os.path import expanduser, join

from utils import get_font_dpi, display_get_scaling_str, plasma, load_profile, output_list_names, validator

CONFIG_KDEGLOBALS = expanduser('~/.config/kdeglobals')
CONFIG_KCMFONTS = expanduser('~/.config/kcmfonts')
CONFIG_KCMINPUT = expanduser('~/.config/kcminputrc')
CONFIG_STARTUP = expanduser('~/.config/startupconfig')
CONFIG_SHELL = expanduser('~/.config/plasmashellrc')
CONFIG_SPLASH = expanduser('~/.config/ksplashrc')
CONFIG_APPLETS = expanduser('~/.config/plasma-org.kde.plasma.desktop-appletsrc')

parser = argparse.ArgumentParser(description="Command-line KDE Plasma DPI change utility")
parser.add_argument('--profile', required=True)
parser.add_argument('--config', required=True)
parser.add_argument('--no-logout', action='store_true', help="Do not end current desktop session")

args = parser.parse_args()
try:
    validator.assert_valid_config(args.config, join(sys.path[0], 'schema.json'))
    profile = load_profile(args.config, args.profile)

    params = plasma.read_startup_script(CONFIG_STARTUP)
    params['kcmfonts_general_forcefontdpi'] = get_font_dpi(profile.scaling)
    params['kcminputrc_mouse_cursorsize'] = profile.cursor.size
    params['kdeglobals_kscreen_screenscalefactors'] = display_get_scaling_str(output_list_names(), profile.scaling)

    plasma.kill()

    plasma.config_write(CONFIG_KDEGLOBALS, "KScreen", "ScaleFactor", profile.scaling)
    plasma.config_write(CONFIG_KDEGLOBALS, "KScreen", "ScreenScaleFactors",
                        params["kdeglobals_kscreen_screenscalefactors"])
    plasma.config_write(CONFIG_KCMFONTS, "General", "forceFontDPI", params["kcmfonts_general_forcefontdpi"])
    plasma.config_write(CONFIG_KCMINPUT, "Mouse", "cursorSize", params["kcminputrc_mouse_cursorsize"])

    plasma.generate_startup_script(CONFIG_STARTUP, **params)

    for panel in profile.panels:
        plasma.config_write(CONFIG_SHELL, panel.groups, "thickness", panel.thickness)

    for widget in profile.widgets:
        plasma.config_write(CONFIG_APPLETS, widget.groups, widget.key, widget.value)

    if not args.no_logout:
        plasma.session_end()
except Exception as e:
    print("[ERR] {}".format(e))
    exit(1)
