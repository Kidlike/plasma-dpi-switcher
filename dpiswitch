#! /usr/bin/env python3

import argparse
import os
import sys

from dpiswitchutils import validator, plasma, schema
from dpiswitchutils.utils import *

parser = argparse.ArgumentParser(description="Command-line KDE Plasma DPI change utility")
parser.add_argument('--generate', action='store_true', help="Generate a profile based on the current settings")
parser.add_argument('--profile', help="Profile name being interacted with", required='--generate' in sys.argv)
parser.add_argument('--description', action='store', default='', help="Description for the profile to be generated")
parser.add_argument('--delete-profile', action='store_true', help="Remove a profile from the config file")
parser.add_argument('--config', default=get_default_config_filename_assert_exists(os.environ))
parser.add_argument('--no-logout', action='store_true', help="Do not end current desktop session")

args = parser.parse_args()
try:
    validator.assert_valid_config(args.config, schema.SCHEMA)

    if args.generate:
        print("Generating a new profile based on the current settings.")
        profile = plasma.read_current_profile()
        profile["name"] = args.profile
        profile["description"] = args.description

        profile_save_to_file(profile, args.config)

        print("Profile successfully generated!")
        exit(0)

    config = load_config_file(args.config)
    profilename = args.profile if args.profile is not None else prompt_for_profile(config)
    profile = find_profile(config, profilename)

    if args.delete_profile:
        profile_remove(profilename, args.config)

        print("Profile successfully deleted")
        exit(0)

    plasma.apply_profile(profile)

    if not args.no_logout:
        plasma.session_end()
except Exception as e:
    print("[ERR] {}".format(e))
    exit(1)
except KeyboardInterrupt:
    exit(0)
